"""Models and database functions for this app."""
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash

db = SQLAlchemy()
conn_proj = "{{kwargs['conn']}}"

class User(db.Model, UserMixin):
    """User model. Inherits UserMixin to get access to
    is_authenticated(), is_active(), is_anonymous(), get_id() which we will
    call in our app routes.
    """

    __tablename__ = 'users'

    id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    fname = db.Column(db.String(30), nullable=True)
    lname = db.Column(db.String(30), nullable=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(100), nullable=False, index=True, unique=True)
    password_hash = db.Column(db.String(100), nullable=False)
    created_on  = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_on = db.Column(db.DateTime, default=db.func.current_timestamp(),
                                        onupdate=db.func.current_timestamp())

    def __repr__(self):
        """User info"""
        return f'<User id={self.id} email={self.email}>'

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)


{% for table in kwargs['tables_camelcase'] -%}
    class {{ table ~ "(db.Model):" }}
    {% set tname = kwargs['tables'][loop.index0] -%}
    __tablename__ = {{ "'" ~ tname ~ "'" }}

    id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), index=True)
    {% for field in kwargs[tname]['tschema'] -%}
        {%- set fieldprops = kwargs[tname]['tschema'][field] -%}
        {%- if fieldprops['input_type'] == "number" -%}
        {{ field ~ " = db.Column(db.Integer, nullable=True)" }}
        {%- elif fieldprops['input_type'] == "checkbox" -%}
        {{ field ~ " = db.Column(db.Boolean, nullable=True, default=False)" }}
        {%- elif fieldprops['input_type'] == "textarea" -%}
        {{ field ~ " = db.Column(db.Text, nullable=True)" }}
        {%- else -%}
        {{ field ~ " = db.Column(db.String(50), nullable=True)" }}
        {%- endif %}
    {% endfor -%}
    created_on  = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_on = db.Column(db.DateTime, default=db.func.current_timestamp(),
                                        onupdate=db.func.current_timestamp())
    # Relationship to user
    user = db.relationship('User',
                           backref=db.backref('{{ table }}', order_by=id))

    def __repr__(self):
        """{{ table }} info"""
        return f'<{{ table }} id={self.id}>'


{% endfor %}

{% raw %}
def connect_to_db(app):
    """Connect the database to our Flask app."""

    app.config['SQLALCHEMY_DATABASE_URI'] = conn_proj
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SQLALCHEMY_ECHO'] = False
    db.app = app
    db.init_app(app)


if __name__ == "__main__":
    # run this file only when you are initializing db
    from flask import Flask
    app = Flask(__name__)

    connect_to_db(app)
    # initialize db
    db.drop_all()
    db.create_all()
    print("Connected to DB: "+conn_proj)
{% endraw %}
